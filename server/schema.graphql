# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  email: String!
  name: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createUrl(data: UrlCreateInput!): Url!
  createUser(data: UserCreateInput!): User!
  deleteUrl(where: UrlWhereUniqueInput!): Url!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateUrl(data: UrlUpdateInput!, where: UrlWhereUniqueInput!): Url!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _urlsMeta(orderBy: [UrlOrderByInput!], skip: Float, take: Float, where: UrlWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  me: User!
  url(where: UrlWhereUniqueInput!): Url
  urls(orderBy: [UrlOrderByInput!], skip: Float, take: Float, where: UrlWhereInput): [Url!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Url {
  click: Float
  count: Float!
  createdAt: DateTime!
  id: String!
  originalUrl: String!
  shortUrl: String!
  updatedAt: DateTime!
  user: User
}

input UrlCreateInput {
  click: Float
  count: Float!
  originalUrl: String!
  shortUrl: String!
  user: UserWhereUniqueInput!
}

input UrlCreateNestedManyWithoutUsersInput {
  connect: [UrlWhereUniqueInput!]
}

input UrlListRelationFilter {
  every: UrlWhereInput
  none: UrlWhereInput
  some: UrlWhereInput
}

input UrlOrderByInput {
  click: SortOrder
  count: SortOrder
  createdAt: SortOrder
  id: SortOrder
  originalUrl: SortOrder
  shortUrl: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UrlUpdateInput {
  click: Float
  count: Float
  originalUrl: String
  shortUrl: String
  user: UserWhereUniqueInput
}

input UrlUpdateManyWithoutUsersInput {
  connect: [UrlWhereUniqueInput!]
  disconnect: [UrlWhereUniqueInput!]
  set: [UrlWhereUniqueInput!]
}

input UrlWhereInput {
  click: IntNullableFilter
  count: IntFilter
  id: StringFilter
  originalUrl: StringFilter
  shortUrl: StringFilter
  user: UserWhereUniqueInput
}

input UrlWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  roles: JSON!
  updatedAt: DateTime!
  urls(orderBy: [UrlOrderByInput!], skip: Float, take: Float, where: UrlWhereInput): [Url!]!
  username: String!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
  roles: JSON!
  urls: UrlCreateNestedManyWithoutUsersInput
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  roles: JSON
  urls: UrlUpdateManyWithoutUsersInput
  username: String
}

input UserWhereInput {
  email: StringFilter
  id: StringFilter
  name: StringFilter
  urls: UrlListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
